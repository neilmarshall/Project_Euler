"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

We can see that 28 is the first triangle number to have over five divisors (1, 2, 4, 7 14 and 28, i.e. proper divisors and the number itself).

What is the value of the first triangle number to have over five hundred divisors?
"""

import itertools

def PE_12(limit):
    """
    Return first triangle number with at least limit divisors

    >>> PE_12(5)
    28

    >>> PE_12(500)
    76576500
    """
    for n in itertools.count(1):
        t = n * (n + 1) // 2  # calculate the nth triangle number
        divisor_count = 1 if t == 1 else 2  # set at to 2 begin with since 1 and t itself are divisors
        for i in range(2, int(t**0.5) + 1):
            if t % i == 0:
                divisor_count += 1 if i * i == t else 2  # add divisors, without double counting the square root
        if divisor_count >= limit:
            return t


if __name__ == '__main__':
    import doctest; doctest.testmod(verbose=True)

"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
all figurate (polygonal) numbers and are generated by the following formulae:

    Triangle        P3, n = n(n+1)/2        1, 3, 6, 10, 15, ...
    Square          P4, n = n2              1, 4, 9, 16, 25, ...
    Pentagonal      P5, n = n(3n−1)/2       1, 5, 12, 22, 35, ...
    Hexagonal       P6, n = n(2n−1)         1, 6, 15, 28, 45, ...
    Heptagonal      P7, n = n(5n−3)/2       1, 7, 18, 34, 55, ...
    Octagonal       P8, n = n(3n−2)         1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

The set is cyclic, in that the last two digits of each number is the first two
digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
pentagonal (P5,44=2882), is represented by a different number in the set.

This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which
each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
octagonal, is represented by a different number in the set.

Solution: 28684
"""
from itertools import chain

def generate_sequence(generator, start, end):
    sequence, n, t = [], 0, 0
    while t <= end:
        n += 1
        t = generator(n)
        if t >= start and t <= end:
            sequence.append(t)
    return sequence


def make_node(n, form):
    return (str(n)[:2], str(n)[2:], form)


triangles = map(lambda x: Node(x, 'tri'), generate_sequence(lambda n: n * (n + 1) // 2, 1000, 9999))
squares = map(lambda x: Node(x, 'sqa'), generate_sequence(lambda n: n * n, 1000, 9999))
pentagonals = map(lambda x: Node(x, 'pen'), generate_sequence(lambda n: n * (3 * n - 1) // 2, 1000, 9999))
hexagonals = map(lambda x: Node(x, 'hex'), generate_sequence(lambda n: n * (2 * n - 1), 1000, 9999))
heptagonals = map(lambda x: Node(x, 'hep'), generate_sequence(lambda n: n * (5 * n - 3) // 2, 1000, 9999))
octagonals = map(lambda x: Node(x, 'oct'), generate_sequence(lambda n: n * (3 * n - 2), 1000, 9999))


all_nodes = list(chain(triangles, squares, pentagonals, hexagonals, heptagonals, octagonals))

def test_deque(dq, used_states):
    if len(dq) == 6:
        return dq[0][0] == dq[-1][1]
    a, b, c = dq[-1]
    for x, y, z in all_nodes:
        if b == x and c not in used_states:
            dq.append((x, y, z))
            if test_deque(dq.copy(), used_states | set(z)):
                return True
            else:
                dq.pop()
    else:
        return False

if __name__ == '__main__':
    import pdb; pdb.set_trace()
    dq = deque()
    dq.append(all_nodes[0])
    test_deque(dq, set(all_nodes[0][-1]))
